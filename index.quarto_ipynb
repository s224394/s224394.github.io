{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Looking at Vehicle thefts from 2003-2024 in \n",
        "from: markdown+emoji\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "## The data\n",
        "Since the year 2003 the police department of san francisco has been reporting crime data. Of particular intererest for analysis is the different crime types, the time of incident (both date but also time of day down to the minute) but also the coordinates of the incident (given in latitude/longitude). From this data its possible to look at temporal and spatial trends of different crimes over the last 20+ years. The different categoris of crimes include Vehicle theft, vandalism, robbery, prostiution and many more. \n",
        "I have choosen to look at the trends of vehicle thefts since the trend in many ways are unique compared to the other types of crimes, but i will go more into detail later. \n",
        "\n",
        "## The temporal trend of vehicle thefts\n",
        "The first super relevant thing is to look at how the number of incidents of vehicle theft have evolved over time.\n"
      ],
      "id": "98d90f66"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd \n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "data=pd.read_csv(\"C:/NoterDTU/6_semester/Social_data/website_2/s224394.github.io/merged_data.csv\")\n",
        "crimes = data[['Category', 'Year']]\n",
        "crimes = crimes[(crimes['Category']=='VEHICLE THEFT') & (crimes['Year']!=2025)  ]\n",
        "crime_counts = crimes[\"Year\"].value_counts().sort_index()\n",
        "crime_counts.plot(kind=\"bar\",color=\"indigo\",edgecolor=\"black\")\n",
        "plt.ylabel(\"Number of incidents\")\n",
        "plt.xlabel(\"Year\")\n",
        "plt.title(\"Number of Vehicle thefts per year (2003-2024)\")\n",
        "plt.show()"
      ],
      "id": "5205caec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "One thing one notices almost immedialty is the sudden drop from 2005 to 2006 and onwards. In 2005 the numbers peak at around 17.500 vehicle thefts while the next years it drops by around 10.000 and remains in that range going forward. This approximately 60% of the crimes that just stopped happening in one year. That seems quite strange. Some sources suggest that the fact that cars are hard to break into and harder to dissamble might be :grinning:\n",
        "\n",
        "We will later compare vehicle theft to some other crimes in order to see if this was the overall trend of crime data (spoilers its not)\n",
        "\n",
        "## The spatial trends \n",
        "\n",
        "One thing one might suspect could explain the sudden drop is if there suddenly where a focus from the police deparment on a specific area. As previously mentioned they have the data for where the different crimes are happening and one would then think that they then priotize forces in these specific areas. In order to look at the we plot a time series of where the incidents of vehecle theft is happening for a given month and try to see if there is any difference.\n"
      ],
      "id": "656082f1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import folium\n",
        "from folium.plugins import HeatMapWithTime\n",
        "from IPython.display import display\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv(\"C:/NoterDTU/6_semester/Social_data/website_2/s224394.github.io/merged_data.csv\")\n",
        "\n",
        "# Filter for vehicle thefts between 2003-2007\n",
        "df_filtered = df[(df['Category'] == 'VEHICLE THEFT') & \n",
        "                 (df['Year'].between(2003, 2024))].copy()\n",
        "\n",
        "# Extract relevant columns and drop NA\n",
        "df_filtered = df_filtered[['Latitude', 'Longitude', 'Month', 'Year']].dropna()\n",
        "\n",
        "# Check for valid coordinates\n",
        "valid_coords = df_filtered[\n",
        "    (df_filtered['Latitude'].between(-90, 90)) & \n",
        "    (df_filtered['Longitude'].between(-180, 180))\n",
        "]\n",
        "\n",
        "# Define month mapping and order\n",
        "month_mapping = {\n",
        "    \"January\": 1, \"February\": 2, \"March\": 3, \"April\": 4, \n",
        "    \"May\": 5, \"June\": 6, \"July\": 7, \"August\": 8, \n",
        "    \"September\": 9, \"October\": 10, \"November\": 11, \"December\": 12\n",
        "}\n",
        "month_names = list(month_mapping.keys())\n",
        "\n",
        "# Create numerical month column\n",
        "df_filtered['MonthNum'] = df_filtered['Month'].map(month_mapping)\n",
        "\n",
        "# Sort by year and month\n",
        "df_filtered = df_filtered.sort_values(['Year', 'MonthNum'])\n",
        "\n",
        "# Prepare heat data and time index\n",
        "heat_data = []\n",
        "time_index = []\n",
        "\n",
        "for year in range(2003, 2025):\n",
        "    for month_num in range(1, 13):\n",
        "        month_data = df_filtered[\n",
        "            (df_filtered['Year'] == year) & \n",
        "            (df_filtered['MonthNum'] == month_num)\n",
        "        ]\n",
        "        coords = month_data[['Latitude', 'Longitude']].values.tolist()\n",
        "        heat_data.append(coords)\n",
        "        time_index.append(f\"{month_names[month_num-1]} {year}\")\n",
        "        \n",
        "\n",
        "# Only create map if we have data\n",
        "\n",
        "# Create base map\n",
        "base_map = folium.Map(location=[37.75800, -122.41914], zoom_start=11.5,zoom_control=0,scrollWheelZoom=False,dragging=0)\n",
        "\n",
        "# Add heatmap with time\n",
        "HeatMapWithTime(\n",
        "    heat_data,\n",
        "    index=time_index,  # Time labels showing month and year\n",
        "    auto_play=0,\n",
        "    max_opacity=0.5,\n",
        "    radius=11,\n",
        "    min_opacity=0.1,\n",
        "    gradient={0.2: 'blue', 0.4: 'lime', 0.6: 'orange', 0.8: 'red'},\n",
        "    display_index=True,\n",
        "    use_local_extrema=1, \n",
        "    name=\"Vehicle Thefts\",\n",
        "    blur=1\n",
        ").add_to(base_map)\n",
        "\n",
        "# Display map\n",
        "display(base_map)"
      ],
      "id": "69b76d90",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "From the heatmap its clear that a lot of the incidents happen in the north-eastern/eastern part of san francisco. And that trend does not change as teh years go by. But its clear that there is fewer crimes compared to 2003-2005 and the years after since the point of the heat map are more spread out. \n",
        "\n",
        "The news article \"Car Thefts Decrease Statewide\"[] also tells this story\n",
        "Where the general trend for vehicle theft are on the decline. The reason behind this trend is both the fact that more and more vehicle have implemented alarms, key-coding systems. But also there has also been set up 16 auto-theft task forces. There have also been an increase in the use of so called \"bait-cars\" which are used as bait to track down the drivers and since its normal that they steal more than one car the number of cars that are being stolen drops significantly. In 2006 they made 357 arrest with the use of bait-cars. Which might have severely impacted the amount of cars stolen.\n",
        "\n",
        "After 2006 the number of incidents are generally low compared to \n",
        "\n",
        "Last thing that could be interesting to look at is if the trends in data are unique to car theft or if the over all trend of crime is the \"same\" as with the car theft. \n",
        "\n",
        "## Correlation between crimes\n",
        "\n",
        "In order to compare the crimes. We choose to look at how correlated the different crimes are. \n",
        "What we are comparing is the amount of crimes for a given month example burglary versus vehicle theft in the month of january 2015. We can the make an scatter plot and compute how related the data are. The scatter plot might also show other trends. But we will get to that. :sunglasses:"
      ],
      "id": "3de953c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from bokeh.io import output_notebook, show\n",
        "from bokeh.layouts import column\n",
        "from bokeh.models import Select, Slope, Label, CustomJS, HoverTool\n",
        "from bokeh.plotting import figure, ColumnDataSource\n",
        "\n",
        "# Configure Bokeh to load silently\n",
        "output_notebook(hide_banner=True)\n",
        "\n",
        "# Define focus crimes\n",
        "focuscrimes = {\n",
        "    'WEAPON LAWS', 'PROSTITUTION', 'ROBBERY', 'BURGLARY', 'ASSAULT', \n",
        "    'DRUG/NARCOTIC', 'LARCENY/THEFT', 'VANDALISM', 'VEHICLE THEFT', 'STOLEN PROPERTY'\n",
        "}\n",
        "\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv(\"C:/NoterDTU/6_semester/Social_data/website_2/s224394.github.io/merged_data.csv\")\n",
        "\n",
        "# Filter and process data\n",
        "df_focus = df[df['Category'].isin(focuscrimes)]\n",
        "df_focus_grouped = df_focus.groupby(['Year', 'Month', 'Category']).size().reset_index(name='Crime_Count')\n",
        "df_focus_grouped['Date'] = pd.to_datetime(df_focus_grouped['Month'] + ' ' + df_focus_grouped['Year'].astype(str), errors='coerce')\n",
        "df_focus_grouped = df_focus_grouped.dropna()\n",
        "\n",
        "# Extract month and year for hover tool\n",
        "df_focus_grouped['Month_Year'] = df_focus_grouped['Date'].dt.strftime('%b %Y')\n",
        "\n",
        "# Pivot the data\n",
        "df_pivot = df_focus_grouped.pivot_table(index=['Date', 'Month_Year'], columns='Category', values='Crime_Count', fill_value=0)\n",
        "df_pivot['Total Crimes'] = df_pivot.sum(axis=1)\n",
        "df_pivot.reset_index(inplace=True)\n",
        "\n",
        "# Prepare plotting data\n",
        "numeric_cols = [col for col in df_pivot.columns if col not in ['Date', 'Month_Year']]\n",
        "df_plot = df_pivot[numeric_cols]\n",
        "\n",
        "# Set initial variables\n",
        "x_init = numeric_cols[8]\n",
        "y_init = numeric_cols[1]\n",
        "x_data = df_plot[x_init].values\n",
        "y_data = df_plot[y_init].values\n",
        "\n",
        "# Calculate initial regression\n",
        "n = len(x_data)\n",
        "x_sum, y_sum, xy_sum, x2_sum, y2_sum = x_data.sum(), y_data.sum(), (x_data*y_data).sum(), (x_data**2).sum(), (y_data**2).sum()\n",
        "slope_val = (n * xy_sum - x_sum * y_sum) / (n * x2_sum - x_sum * x_sum)\n",
        "intercept = (y_sum - slope_val * x_sum) / n\n",
        "r_value = (n * xy_sum - x_sum * y_sum) / np.sqrt((n * x2_sum - x_sum * x_sum) * (n * y2_sum - y_sum * y_sum))\n",
        "r_squared = r_value ** 2\n",
        "\n",
        "# Create ColumnDataSource with Month_Year for hover tool\n",
        "source = ColumnDataSource(df_pivot)\n",
        "\n",
        "# Create figure with initial axis labels\n",
        "plot = figure(\n",
        "    title=\"Crime Data Correlation Analysis\", \n",
        "    x_axis_label=\"Number of incidents for X-axis crime type (month,year)\",\n",
        "    y_axis_label=\"Number of incidents for Y-axis crime type (month,year)\",\n",
        "    tools=\"pan,wheel_zoom,box_zoom,reset\",\n",
        "    width=750, \n",
        "    height=550,\n",
        "    background_fill_color=\"#f5f5f5\",\n",
        "    toolbar_location=\"above\"\n",
        ")\n",
        "\n",
        "# Format plot appearance\n",
        "plot.title.text_font_size = '16pt'\n",
        "plot.xaxis.axis_label_text_font_size = \"12pt\"\n",
        "plot.yaxis.axis_label_text_font_size = \"12pt\"\n",
        "plot.grid.grid_line_alpha = 0.3\n",
        "\n",
        "# Add only the month-year hover tool\n",
        "hover = HoverTool(\n",
        "    tooltips=[\n",
        "        (\"Time Period\", \"@Month_Year\"),\n",
        "        (x_init, f\"@{{{x_init}}}\"),\n",
        "        (y_init, f\"@{{{y_init}}}\"),\n",
        "        (\"Total Crimes\", \"@{Total Crimes}\")\n",
        "    ],\n",
        "    mode='mouse'\n",
        ")\n",
        "plot.add_tools(hover)\n",
        "\n",
        "# Initial scatter plot\n",
        "scatter = plot.scatter(x=x_init, y=y_init, source=source, size=10,\n",
        "                      color=\"navy\", alpha=0.7, line_color=\"white\")\n",
        "\n",
        "# Dropdown widgets\n",
        "x_axis = Select(title=\"X-Axis Crime Type:\", value=x_init,\n",
        "               options=sorted(numeric_cols), width=250)\n",
        "y_axis = Select(title=\"Y-Axis Crime Type:\", value=y_init,\n",
        "               options=sorted(numeric_cols), width=250)\n",
        "\n",
        "# Regression line\n",
        "slope = Slope(gradient=slope_val, y_intercept=intercept, \n",
        "             line_color='red', line_dash='dashed', line_width=2.5)\n",
        "plot.add_layout(slope)\n",
        "\n",
        "# R² label\n",
        "r_squared_label = Label(x=70, y=10, x_units='screen', y_units='screen',\n",
        "                       text=f\"R² = {r_squared:.3f}\", text_font_size='13px',\n",
        "                       text_color='red', background_fill_color='white',\n",
        "                       background_fill_alpha=0.8)\n",
        "plot.add_layout(r_squared_label)\n",
        "\n",
        "# JavaScript callback with axis label updates\n",
        "callback = CustomJS(args=dict(\n",
        "    source=source,\n",
        "    scatter=scatter,\n",
        "    slope=slope,\n",
        "    r_squared_label=r_squared_label,\n",
        "    plot=plot,\n",
        "    x_axis=x_axis,\n",
        "    y_axis=y_axis\n",
        "), code=\"\"\"\n",
        "    const x = x_axis.value;\n",
        "    const y = y_axis.value;\n",
        "    const x_data = source.data[x];\n",
        "    const y_data = source.data[y];\n",
        "    \n",
        "    // Calculate statistics\n",
        "    let x_sum = 0, y_sum = 0, xy_sum = 0, x2_sum = 0, y2_sum = 0;\n",
        "    const n = x_data.length;\n",
        "    \n",
        "    for (let i = 0; i < n; i++) {\n",
        "        x_sum += x_data[i];\n",
        "        y_sum += y_data[i];\n",
        "        xy_sum += x_data[i] * y_data[i];\n",
        "        x2_sum += x_data[i] * x_data[i];\n",
        "        y2_sum += y_data[i] * y_data[i];\n",
        "    }\n",
        "    \n",
        "    // Calculate regression parameters\n",
        "    const slope_val = (n * xy_sum - x_sum * y_sum) / (n * x2_sum - x_sum * x_sum);\n",
        "    const intercept = (y_sum - slope_val * x_sum) / n;\n",
        "    const r_value = (n * xy_sum - x_sum * y_sum) / \n",
        "                   Math.sqrt((n * x2_sum - x_sum * x_sum) * (n * y2_sum - y_sum * y_sum));\n",
        "    const r_squared = r_value * r_value;\n",
        "    \n",
        "    // Update plot elements\n",
        "    scatter.glyph.x = {field: x};\n",
        "    scatter.glyph.y = {field: y};\n",
        "    slope.gradient = slope_val;\n",
        "    slope.y_intercept = intercept;\n",
        "    r_squared_label.text = `R² = ${r_squared.toFixed(3)}`;\n",
        "    \n",
        "    // Update axis labels\n",
        "    plot.xaxis.axis_label = `${x} (Count)`;\n",
        "    plot.yaxis.axis_label = `${y} (Count)`;\n",
        "\"\"\")\n",
        "\n",
        "# Connect callbacks\n",
        "x_axis.js_on_change('value', callback)\n",
        "y_axis.js_on_change('value', callback)\n",
        "\n",
        "# Layout\n",
        "layout = column(\n",
        "    column(x_axis, y_axis, width=300),\n",
        "    plot\n",
        ")\n",
        "\n",
        "# Show the plot\n",
        "show(layout)"
      ],
      "id": "820b93e7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "When going through the different options and comparing them. One notices that there is close to zero correlation between any of the crimes and vehicle theft. Where as the big reason behind it is the incidents of the years 2003-2005 which are completely different for vehicle theft. If you look at an example as robbery and assault they are way more correlated ($r^2$ value of 0.485) and generally if we compare most of the crimes with the total number of crimes, then they are fairly correlated. Examples being vandalism having $r^2=0.486$ and larcency/theft having $r^2=0.700$. Some of this might also be explained in larcency/theft and vandalism playing a bigger part of the crime incidents numbers\n",
        "\n",
        "One interesting thing one could look at is if not including the years 2003-2005 how much that would impact it. "
      ],
      "id": "88aa5294"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}