{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Assignment unga bunga\"\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "452fe4ae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd \n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "data=pd.read_csv(\"C:/NoterDTU/6_semester/Social_data/website_2/s224394.github.io/merged_data.csv\")\n",
        "crimes = data[['Category', 'Year']]\n",
        "crimes = crimes[(crimes['Category']=='VEHICLE THEFT') & (crimes['Year']!=2025)  ]\n",
        "crime_counts = crimes[\"Year\"].value_counts().sort_index()\n",
        "crime_counts.plot(kind=\"bar\",color=\"indigo\",edgecolor=\"black\")\n",
        "plt.ylabel(\"Number of incidents\")\n",
        "plt.xlabel(\"Year\")\n",
        "plt.title(\"Number of Vehicle thefts per year (2003-2025)\")\n",
        "plt.show()"
      ],
      "id": "6fa266c1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import folium\n",
        "from folium.plugins import HeatMapWithTime\n",
        "from IPython.display import display\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv(\"C:/NoterDTU/6_semester/Social_data/website_2/s224394.github.io/merged_data.csv\")\n",
        "\n",
        "# Filter for vehicle thefts between 2003-2007\n",
        "df_filtered = df[(df['Category'] == 'VEHICLE THEFT') & \n",
        "                 (df['Year'].between(2003, 2024))].copy()\n",
        "\n",
        "# Extract relevant columns and drop NA\n",
        "df_filtered = df_filtered[['Latitude', 'Longitude', 'Month', 'Year']].dropna()\n",
        "\n",
        "# Check for valid coordinates\n",
        "valid_coords = df_filtered[\n",
        "    (df_filtered['Latitude'].between(-90, 90)) & \n",
        "    (df_filtered['Longitude'].between(-180, 180))\n",
        "]\n",
        "\n",
        "# Define month mapping and order\n",
        "month_mapping = {\n",
        "    \"January\": 1, \"February\": 2, \"March\": 3, \"April\": 4, \n",
        "    \"May\": 5, \"June\": 6, \"July\": 7, \"August\": 8, \n",
        "    \"September\": 9, \"October\": 10, \"November\": 11, \"December\": 12\n",
        "}\n",
        "month_names = list(month_mapping.keys())\n",
        "\n",
        "# Create numerical month column\n",
        "df_filtered['MonthNum'] = df_filtered['Month'].map(month_mapping)\n",
        "\n",
        "# Sort by year and month\n",
        "df_filtered = df_filtered.sort_values(['Year', 'MonthNum'])\n",
        "\n",
        "# Prepare heat data and time index\n",
        "heat_data = []\n",
        "time_index = []\n",
        "\n",
        "for year in range(2003, 2025):\n",
        "    for month_num in range(1, 13):\n",
        "        month_data = df_filtered[\n",
        "            (df_filtered['Year'] == year) & \n",
        "            (df_filtered['MonthNum'] == month_num)\n",
        "        ]\n",
        "        coords = month_data[['Latitude', 'Longitude']].values.tolist()\n",
        "        heat_data.append(coords)\n",
        "        time_index.append(f\"{month_names[month_num-1]} {year}\")\n",
        "        \n",
        "\n",
        "# Only create map if we have data\n",
        "\n",
        "# Create base map\n",
        "base_map = folium.Map(location=[37.77919, -122.41914], zoom_start=12.5)\n",
        "\n",
        "# Add heatmap with time\n",
        "HeatMapWithTime(\n",
        "    heat_data,\n",
        "    index=time_index,  # Time labels showing month and year\n",
        "    auto_play=0,\n",
        "    max_opacity=0.5,\n",
        "    radius=13,\n",
        "    min_opacity=0.1,\n",
        "    gradient={0.2: 'blue', 0.4: 'lime', 0.6: 'orange', 0.8: 'red'},\n",
        "    display_index=True,\n",
        "    use_local_extrema=False, \n",
        "    name=\"Vehicle Thefts\",\n",
        "    blur=1\n",
        ").add_to(base_map)\n",
        "\n",
        "# Display map\n",
        "display(base_map)"
      ],
      "id": "c09ed26c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from bokeh.io import output_notebook, show\n",
        "from bokeh.layouts import column\n",
        "from bokeh.models import Select, Slope, Label, CustomJS, HoverTool\n",
        "from bokeh.plotting import figure, ColumnDataSource\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Configure Bokeh to load silently\n",
        "output_notebook(hide_banner=True)\n",
        "\n",
        "# Load and prepare your crime data\n",
        "df =pd.read_csv(\"C:/NoterDTU/6_semester/Social_data/website_2/s224394.github.io/merged_data.csv\")\n",
        "\n",
        "# Define focus crimes\n",
        "focuscrimes = {\n",
        "    'WEAPON LAWS', 'PROSTITUTION', 'ROBBERY', 'BURGLARY', 'ASSAULT', \n",
        "    'DRUG/NARCOTIC', 'LARCENY/THEFT', 'VANDALISM', 'VEHICLE THEFT', 'STOLEN PROPERTY'\n",
        "}\n",
        "\n",
        "# Filter and process data\n",
        "df_focus = df[df['Category'].isin(focuscrimes)]\n",
        "df_focus_grouped = df_focus.groupby(['Year', 'Month', 'Category']).size().reset_index(name='Crime_Count')\n",
        "df_focus_grouped['Date'] = pd.to_datetime(df_focus_grouped['Month'] + ' ' + df_focus_grouped['Year'].astype(str), errors='coerce')\n",
        "df_focus_grouped = df_focus_grouped.dropna()\n",
        "\n",
        "# Extract month and year for hover tool\n",
        "df_focus_grouped['Month_Year'] = df_focus_grouped['Date'].dt.strftime('%b %Y')\n",
        "\n",
        "# Pivot the data\n",
        "df_pivot = df_focus_grouped.pivot_table(index=['Date', 'Month_Year'], columns='Category', values='Crime_Count', fill_value=0)\n",
        "df_pivot['Total Crimes'] = df_pivot.sum(axis=1)\n",
        "df_pivot.reset_index(inplace=True)\n",
        "\n",
        "# Prepare plotting data\n",
        "numeric_cols = [col for col in df_pivot.columns if col not in ['Date', 'Month_Year']]\n",
        "df_plot = df_pivot[numeric_cols]\n",
        "\n",
        "# Set initial variables\n",
        "x_init = numeric_cols[8]\n",
        "y_init = numeric_cols[1]\n",
        "x_data = df_plot[x_init].values\n",
        "y_data = df_plot[y_init].values\n",
        "\n",
        "# Calculate initial regression\n",
        "n = len(x_data)\n",
        "x_sum, y_sum, xy_sum, x2_sum, y2_sum = x_data.sum(), y_data.sum(), (x_data*y_data).sum(), (x_data**2).sum(), (y_data**2).sum()\n",
        "slope_val = (n * xy_sum - x_sum * y_sum) / (n * x2_sum - x_sum * x_sum)\n",
        "intercept = (y_sum - slope_val * x_sum) / n\n",
        "r_value = (n * xy_sum - x_sum * y_sum) / np.sqrt((n * x2_sum - x_sum * x_sum) * (n * y2_sum - y_sum * y_sum))\n",
        "r_squared = r_value ** 2\n",
        "\n",
        "# Create ColumnDataSource with Month_Year for hover tool\n",
        "source = ColumnDataSource(df_pivot)\n",
        "\n",
        "# Create figure with initial axis labels\n",
        "plot = figure(\n",
        "    title=\"Crime Data Correlation Analysis\", \n",
        "    x_axis_label=\"Number of incidents for X-axis crime type (month,year)\",\n",
        "    y_axis_label=\"Number of incidents for Y-axis crime type (month,year)\",\n",
        "    tools=\"pan,wheel_zoom,box_zoom,reset\",\n",
        "    width=750, \n",
        "    height=550,\n",
        "    background_fill_color=\"#f5f5f5\",\n",
        "    toolbar_location=\"above\"\n",
        ")\n",
        "\n",
        "# Format plot appearance\n",
        "plot.title.text_font_size = '16pt'\n",
        "plot.xaxis.axis_label_text_font_size = \"12pt\"\n",
        "plot.yaxis.axis_label_text_font_size = \"12pt\"\n",
        "plot.grid.grid_line_alpha = 0.3\n",
        "\n",
        "# Add only the month-year hover tool\n",
        "hover = HoverTool(\n",
        "    tooltips=[\n",
        "        (\"Time Period\", \"@Month_Year\"),\n",
        "        (x_init, f\"@{{{x_init}}}\"),\n",
        "        (y_init, f\"@{{{y_init}}}\"),\n",
        "        (\"Total Crimes\", \"@{Total Crimes}\")\n",
        "    ],\n",
        "    mode='mouse'\n",
        ")\n",
        "plot.add_tools(hover)\n",
        "\n",
        "# Initial scatter plot\n",
        "scatter = plot.scatter(x=x_init, y=y_init, source=source, size=10,\n",
        "                      color=\"navy\", alpha=0.7, line_color=\"white\")\n",
        "\n",
        "# Dropdown widgets\n",
        "x_axis = Select(title=\"X-Axis Crime Type:\", value=x_init,\n",
        "               options=sorted(numeric_cols), width=250)\n",
        "y_axis = Select(title=\"Y-Axis Crime Type:\", value=y_init,\n",
        "               options=sorted(numeric_cols), width=250)\n",
        "\n",
        "# Regression line\n",
        "slope = Slope(gradient=slope_val, y_intercept=intercept, \n",
        "             line_color='red', line_dash='dashed', line_width=2.5)\n",
        "plot.add_layout(slope)\n",
        "\n",
        "# R² label\n",
        "r_squared_label = Label(x=70, y=10, x_units='screen', y_units='screen',\n",
        "                       text=f\"R² = {r_squared:.3f}\", text_font_size='13px',\n",
        "                       text_color='red', background_fill_color='white',\n",
        "                       background_fill_alpha=0.8)\n",
        "plot.add_layout(r_squared_label)\n",
        "\n",
        "# JavaScript callback with axis label updates\n",
        "callback = CustomJS(args=dict(\n",
        "    source=source,\n",
        "    scatter=scatter,\n",
        "    slope=slope,\n",
        "    r_squared_label=r_squared_label,\n",
        "    plot=plot,\n",
        "    x_axis=x_axis,\n",
        "    y_axis=y_axis\n",
        "), code=\"\"\"\n",
        "    const x = x_axis.value;\n",
        "    const y = y_axis.value;\n",
        "    const x_data = source.data[x];\n",
        "    const y_data = source.data[y];\n",
        "    \n",
        "    // Calculate statistics\n",
        "    let x_sum = 0, y_sum = 0, xy_sum = 0, x2_sum = 0, y2_sum = 0;\n",
        "    const n = x_data.length;\n",
        "    \n",
        "    for (let i = 0; i < n; i++) {\n",
        "        x_sum += x_data[i];\n",
        "        y_sum += y_data[i];\n",
        "        xy_sum += x_data[i] * y_data[i];\n",
        "        x2_sum += x_data[i] * x_data[i];\n",
        "        y2_sum += y_data[i] * y_data[i];\n",
        "    }\n",
        "    \n",
        "    // Calculate regression parameters\n",
        "    const slope_val = (n * xy_sum - x_sum * y_sum) / (n * x2_sum - x_sum * x_sum);\n",
        "    const intercept = (y_sum - slope_val * x_sum) / n;\n",
        "    const r_value = (n * xy_sum - x_sum * y_sum) / \n",
        "                   Math.sqrt((n * x2_sum - x_sum * x_sum) * (n * y2_sum - y_sum * y_sum));\n",
        "    const r_squared = r_value * r_value;\n",
        "    \n",
        "    // Update plot elements\n",
        "    scatter.glyph.x = {field: x};\n",
        "    scatter.glyph.y = {field: y};\n",
        "    slope.gradient = slope_val;\n",
        "    slope.y_intercept = intercept;\n",
        "    r_squared_label.text = `R² = ${r_squared.toFixed(3)}`;\n",
        "    \n",
        "    // Update axis labels\n",
        "    plot.xaxis.axis_label = `${x} (Count)`;\n",
        "    plot.yaxis.axis_label = `${y} (Count)`;\n",
        "\"\"\")\n",
        "\n",
        "# Connect callbacks\n",
        "x_axis.js_on_change('value', callback)\n",
        "y_axis.js_on_change('value', callback)\n",
        "\n",
        "# Layout\n",
        "layout = column(\n",
        "    column(x_axis, y_axis, width=300),\n",
        "    plot\n",
        ")\n",
        "\n",
        "# Show the plot\n",
        "show(layout)"
      ],
      "id": "6bb0a274",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "2+2"
      ],
      "id": "171a4df4",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}